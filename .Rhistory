colnames(co_occurrence_matrix)=rownames(co_occurrence_matrix)=colnames(disease_mx)
lt=lower.tri(co_occurrence_matrix)
co_occurrence_matrix[lt]=NA
co_occurrence_long <- as.data.frame(as.table(co_occurrence_matrix))
co_occurrence_long <- co_occurrence_long %>%
filter(Var1 != Var2)
sorted_co_occurrence <- co_occurrence_long %>%
arrange(desc(Freq))
top_pairs <- head(sorted_co_occurrence, n=10)
print(top_pairs)
# phenotype_summary <- sorted_co_occurrence %>%
#   group_by(Var1) %>%
#   summarise(num_correlated_phenotypes = n(),
#             correlated_phenotypes = toString(Var2))
}
merged_has=readRDS("~/Desktop/output_gp/merged_has.rds")
merged_censor=readRDS("~/Desktop/output_gp/merged_censor.rds")
bad = c(
grep(x = colnames(merged_has), pattern = "composite"),
grep(x = colnames(merged_has), pattern = "HARD"),
grep(x = colnames(merged_has), pattern = "SOFT"),
grep(x = colnames(merged_has), pattern = "INTERMEDIATE"),
grep(x = colnames(merged_has), pattern = "imaging"),
grep(x = colnames(merged_has), pattern = "v2"),
grep(x = colnames(merged_has), pattern = "UKBB"),
grep(x = colnames(merged_has), pattern = "ukbb"),
grep(x = colnames(merged_has), pattern = "inclusive"),
grep(x = colnames(merged_has), pattern = "only"))
bad=unique(bad)
merged_censor <- merged_censor[, (bad) := NULL]
merged_has <- merged_has[, (bad) := NULL]
colnames(merged_censor)[-1]=colnames(merged_has)[-1]=stringr::str_split_fixed(names(merged_censor)[-1],pattern = ":",n = 2)[,1]
disease_df <- as.data.frame(merged_has)
age_df <- as.data.frame(merged_censor)
a=apply(disease_df,2,function(x){sum(is.na(x))})
# Calculate the co-occurrence matrix
disease_matrix=disease_df[,a==0]
time_matrix=age_df[,a==0]
disease_mx=as.matrix(disease_matrix[,-1])
censor_mx= (disease_mx + 1) %% 2
age_mx=time_matrix[,-1]
co_occurrence_matrix <- t(disease_mx)%*%(disease_mx)
###
# Convert the age matrix into a bin matrix
age_bins <- matrix(NA, nrow = nrow(age_mx), ncol = ncol(age_mx))
for (i in 1:ncol(age_mx)) {
age_bins[, i] <- cut(age_mx[, i], breaks = c(0,20,40,50,60,70,80,90,100), labels = FALSE)
}
l=levels(cut(age_mx[,1], breaks = c(0,20,40,50,60,70,80,90,100)))
co_occurrence_by_age <- list()
# Get unique age bins; assuming age_bins is a matrix with the same dimensions as disease_mx
unique_age_bins <- unique(as.vector(age_bins))
v=levels(cut(seq(1:100), breaks = c(0,20,40,50,60,70,80,90,100)))
#for(i in 1:length(l)){
# Loop through each unique age bin
for(bin in 1:length(unique_age_bins)) {
# Create a mask for rows corresponding to the current age bin and uncensored data
mask <- (age_bins == bin)
print(v[bin])
# Subset the disease matrix based on the mask
# Create a matrix of the same dimensions filled with NA
disease_subset <- matrix(0, nrow=nrow(disease_mx), ncol=ncol(disease_mx))
# Fill in the values where mask is TRUE
disease_subset[mask] <- disease_mx[mask]
# Compute the co-occurrence matrix using fast matrix multiplication
co_occurrence_matrix <- t(disease_subset) %*% disease_subset
colnames(co_occurrence_matrix)=rownames(co_occurrence_matrix)=colnames(disease_mx)
lt=lower.tri(co_occurrence_matrix)
co_occurrence_matrix[lt]=NA
co_occurrence_long <- as.data.frame(as.table(co_occurrence_matrix))
co_occurrence_long <- co_occurrence_long %>%
filter(Var1 != Var2)
sorted_co_occurrence <- co_occurrence_long %>%
arrange(desc(Freq))
top_pairs <- head(sorted_co_occurrence, n=10)
print(top_pairs)
# phenotype_summary <- sorted_co_occurrence %>%
#   group_by(Var1) %>%
#   summarise(num_correlated_phenotypes = n(),
#             correlated_phenotypes = toString(Var2))
}
l=levels(cut(age_mx[,1], breaks = c(0,20,40,50,60,70,80,90)))
l=levels(cut(age_mx[,1], breaks = c(0,20,40,50,60,70,80,90)))
co_occurrence_by_age <- list()
# Get unique age bins; assuming age_bins is a matrix with the same dimensions as disease_mx
unique_age_bins <- unique(as.vector(age_bins))
v=levels(cut(seq(1:100), breaks = c(0,20,40,50,60,70,80,90)))
#for(i in 1:length(l)){
# Loop through each unique age bin
for(bin in 1:length(unique_age_bins)) {
# Create a mask for rows corresponding to the current age bin and uncensored data
mask <- (age_bins == bin)
print(v[bin])
# Subset the disease matrix based on the mask
# Create a matrix of the same dimensions filled with NA
disease_subset <- matrix(0, nrow=nrow(disease_mx), ncol=ncol(disease_mx))
# Fill in the values where mask is TRUE
disease_subset[mask] <- disease_mx[mask]
# Compute the co-occurrence matrix using fast matrix multiplication
co_occurrence_matrix <- t(disease_subset) %*% disease_subset
colnames(co_occurrence_matrix)=rownames(co_occurrence_matrix)=colnames(disease_mx)
lt=lower.tri(co_occurrence_matrix)
co_occurrence_matrix[lt]=NA
co_occurrence_long <- as.data.frame(as.table(co_occurrence_matrix))
co_occurrence_long <- co_occurrence_long %>%
filter(Var1 != Var2)
sorted_co_occurrence <- co_occurrence_long %>%
arrange(desc(Freq))
top_pairs <- head(sorted_co_occurrence, n=10)
print(top_pairs)
# phenotype_summary <- sorted_co_occurrence %>%
#   group_by(Var1) %>%
#   summarise(num_correlated_phenotypes = n(),
#             correlated_phenotypes = toString(Var2))
}
fdefinitions="~/Library/CloudStorage/Dropbox-Personal/definitions_cardiometabolic_traits.tsv"
dfDefinitions_processed_expanded<-read_definition_table(fdefinitions,fdata_setting,extdata_dir)
length(fdefinitions)
dim(fdefinitions)
dim(dfDefinitions_processed_expanded)
dfDefinitions_processed_expanded$TRAIT
diseases<-dfDefinitions_processed_expanded$TRAIT[c(1,2,3,7,8,13,14,15,24,41,42,c(43:66)]
diseases<-dfDefinitions_processed_expanded$TRAIT[c(1,2,3,7,8,13,14,15,24,41,42,c(43:66))]
diseases
lenth(disease)
dfDefinitions_processed_expanded[dfDefinitions_processed_expanded$TRAIT%in%"Ast",]
out_folder<-paste0(pheno_dir,"output/")
if(!dir.exists(file.path(out_folder))){
dir.create(file.path(out_folder))
}
dfukb_baseline_pheno<-dfukb_baseline
dfukb_baseline_pheno<-dfukb_baseline_pheno
# Loop through the traits, including family history of related diseases and the diabetes medication use
for (disease in diseases){
print(disease)
lst.case_control <- get_cases_controls(definitions=dfDefinitions_processed_expanded %>% filter(TRAIT==disease), lst.harmonized.data$lst.data,dfData.settings, df_reference_date=df_reference_dt_v0)
# Add the trait to the column names
colnames(lst.case_control$df.casecontrol) <- paste(disease,"0",colnames(lst.case_control$df.casecontrol), sep = "_")
# Except for participant identifier
names(lst.case_control$df.casecontrol)[names(lst.case_control$df.casecontrol) == paste(disease,"0","identifier", sep = "_")]<-"identifier"
# Merge these columns with dfukb_baseline_pheno
dfukb_baseline_pheno<-merge(dfukb_baseline_pheno,lst.case_control$df.casecontrol,by="identifier",all.x = TRUE,all.y = FALSE)
}
diseases
dfDefinitions_processed_expanded$TRAIT
dfDefinitions_processed_expanded
dfDefinitions_processed_expanded$TRAIT
dfukb_baseline_pheno=readRS("~/Library/CloudStorage/Dropbox-Personal/pheno_dir/output/dfukb_baseline_pheno.rds")
dfukb_baseline_pheno=readRDS("~/Library/CloudStorage/Dropbox-Personal/pheno_dir/output/dfukb_baseline_pheno.rds")
diseases<-dfDefinitions_processed_expanded$TRAIT[c(1,2,3,7,8,13,14,15,24,41,42,c(43:59))]
# Make an output folder to store the result
out_folder<-paste0(pheno_dir,"output/")
if(!dir.exists(file.path(out_folder))){
dir.create(file.path(out_folder))
}
dfukb_baseline_pheno<-dfukb_baseline_pheno
# Loop through the traits, including family history of related diseases and the diabetes medication use
dfDefinitions_processed_expanded[dfDefinitions_processed_expanded$TRAIT%in%Dm2,]]
dfDefinitions_processed_expanded[dfDefinitions_processed_expanded$TRAIT%in%Dm2,]
dfDefinitions_processed_expanded[dfDefinitions_processed_expanded$TRAIT%in%"Dm2",]
dfDefinitions_processed_expanded[dfDefinitions_processed_expanded$TRAIT%in%"DmT2",]
length(disease)
length(diseases)
for (disease in diseases){
print(disease)
lst.case_control <- get_cases_controls(definitions=dfDefinitions_processed_expanded %>% filter(TRAIT==disease), lst.harmonized.data$lst.data,dfData.settings, df_reference_date=df_reference_dt_v0)
# Add the trait to the column names
colnames(lst.case_control$df.casecontrol) <- paste(disease,"0",colnames(lst.case_control$df.casecontrol), sep = "_")
# Except for participant identifier
names(lst.case_control$df.casecontrol)[names(lst.case_control$df.casecontrol) == paste(disease,"0","identifier", sep = "_")]<-"identifier"
# Merge these columns with dfukb_baseline_pheno
dfukb_baseline_pheno<-merge(dfukb_baseline_pheno,lst.case_control$df.casecontrol,by="identifier",all.x = TRUE,all.y = FALSE)
}
head(disease_mx)
sum(disease_mx[,"Alzheimers_or_Dementia"])
head(df.phecode.wide)
dim(df.phecode.wide)
dim(disease_mx)
head(dfukb_baseline_pheno)
for(i in 1:length(diseases)){
name=paste0(diseases[i],"_0_Any");
}
pheno_dir
hesindir="~/Documents/"
fhesin <- paste(hesin_dir,"hesin.txt.gz",sep="")
hesin_dir="~/Documents/"
fhesin <- paste(hesin_dir,"hesin.txt.gz",sep="")
fhesin_diag <- paste(hesin_dir,"hesin_diag.txt.gz",sep="")
fhesin_oper <- paste(hesin_dir,"hesin_oper.txt.gz",sep="")
lst.harmonized.data<-harmonize_ukb_data(f.ukbtab = fukbtab,f.html = fhtml,dfDefinitions=dfDefinitions_processed_expanded,f.gp_clinical = fgp_clinical,f.gp_scripts = fgp_scripts,f.hesin = fhesin,f.hesin_diag = fhesin_diag,f.hesin_oper =fhesin_oper,f.death_portal = fdeath_portal,f.death_cause_portal = fdeath_cause_portal,allow_missing_fields = TRUE)
gp_reg=fread("~/Dropbox/ukb+gp/gp_registrations.txt")
gp_reg=fread("~/Library/CloudStorage/Dropbox-Personal//ukb+gp/gp_registrations.txt")
gp_folks=unique(gp_reg$eid)
### only use gp
fukbtab <- paste(pheno_dir,"ukb47823.tab",sep="")
# meta data file
fhtml <- paste(pheno_dir,"ukb47823.html",sep="")
# hospital inpatient data
hesin_dir="~/Documents/"
fhesin <- paste(hesin_dir,"hesin.txt.gz",sep="")
fhesin_diag <- paste(hesin_dir,"hesin_diag.txt.gz",sep="")
fhesin_oper <- paste(hesin_dir,"hesin_oper.txt.gz",sep="")
# GP data
fgp_clinical <- paste(pheno_dir,"ukb_showcase_9.01/gp_clinical.txt",sep="")
fgp_scripts <- paste(pheno_dir,"ukb_showcase_9.01/gp_scripts.txt",sep="")
# Death registry
fdeath_portal <- paste(pheno_dir,"ukb_showcase_9.01/death.txt",sep="")
fdeath_cause_portal <- paste(pheno_dir,"ukb_showcase_9.01/death_cause.txt",sep="")
extdata_dir <- paste0(system.file("extdata", package="ukbpheno"),"/")
fdata_setting <- paste0(extdata_dir,"data.settings.tsv")
dfData.settings <- fread(fdata_setting)
## clinical stuff and dfData settings and send Ming the likelihood infromation on time-dependent coefficients
# exp=which(dfData.settings$classification=="BNF")
# dfData.settings$expand_codes[exp]=1
#fdefinitions <- paste0(extdata_dir,"definitions_cardiometabolic_traits.tsv")
fdefinitions="~/Library/CloudStorage/Dropbox-Personal/definitions_cardiometabolic_traits.tsv"
dfDefinitions_processed_expanded<-read_definition_table(fdefinitions,fdata_setting,extdata_dir)
lst.harmonized.data<-harmonize_ukb_data(f.ukbtab = fukbtab,f.html = fhtml,dfDefinitions=dfDefinitions_processed_expanded,f.gp_clinical = fgp_clinical,f.gp_scripts = fgp_scripts,f.hesin = fhesin,f.hesin_diag = fhesin_diag,f.hesin_oper =fhesin_oper,f.death_portal = fdeath_portal,f.death_cause_portal = fdeath_cause_portal,allow_missing_fields = TRUE)
hesin_dir="~/Documents/hesin_May2023"
fhesin <- paste(hesin_dir,"hesin.txt.gz",sep="")
fhesin_diag <- paste(hesin_dir,"hesin_diag.txt.gz",sep="")
fhesin_oper <- paste(hesin_dir,"hesin_oper.txt.gz",sep="")
hesin_dir="~/Documents/hesin_May2023/"
fhesin <- paste(hesin_dir,"hesin.txt.gz",sep="")
fhesin_diag <- paste(hesin_dir,"hesin_diag.txt.gz",sep="")
fhesin_oper <- paste(hesin_dir,"hesin_oper.txt.gz",sep="")
head(fhesin)
h=fread(fhesin)
gp_reg=fread("~/Library/CloudStorage/Dropbox-Personal//ukb+gp/gp_registrations.txt")
gp_folks=unique(gp_reg$eid)
### only use gp
fukbtab <- paste(pheno_dir,"ukb47823.tab",sep="")
# meta data file
fhtml <- paste(pheno_dir,"ukb47823.html",sep="")
# hospital inpatient data
hesin_dir="~/Documents/hesin_May2023/"
fhesin <- paste(hesin_dir,"hesin.txt.gz",sep="")
fhesin_diag <- paste(hesin_dir,"hesin_diag.txt.gz",sep="")
fhesin_oper <- paste(hesin_dir,"hesin_oper.txt.gz",sep="")
# GP data
fgp_clinical <- paste(pheno_dir,"ukb_showcase_9.01/gp_clinical.txt",sep="")
fgp_scripts <- paste(pheno_dir,"ukb_showcase_9.01/gp_scripts.txt",sep="")
# Death registry
fdeath_portal <- paste(pheno_dir,"ukb_showcase_9.01/death.txt",sep="")
fdeath_cause_portal <- paste(pheno_dir,"ukb_showcase_9.01/death_cause.txt",sep="")
extdata_dir <- paste0(system.file("extdata", package="ukbpheno"),"/")
fdata_setting <- paste0(extdata_dir,"data.settings.tsv")
dfData.settings <- fread(fdata_setting)
## clinical stuff and dfData settings and send Ming the likelihood infromation on time-dependent coefficients
# exp=which(dfData.settings$classification=="BNF")
# dfData.settings$expand_codes[exp]=1
#fdefinitions <- paste0(extdata_dir,"definitions_cardiometabolic_traits.tsv")
fdefinitions="~/Library/CloudStorage/Dropbox-Personal/definitions_cardiometabolic_traits.tsv"
dfDefinitions_processed_expanded<-read_definition_table(fdefinitions,fdata_setting,extdata_dir)
# dfDefinitions_processed_expanded$BNF[dfDefinitions_processed_expanded$TRAIT=="RxHt"]=unique(hypertension$bnf_code)
# dfDefinitions_processed_expanded$DMD[dfDefinitions_processed_expanded$TRAIT=="RxHt"]=unique(hypertension$dmd_code)
# harmonize the data
lst.harmonized.data<-harmonize_ukb_data(f.ukbtab = fukbtab,f.html = fhtml,dfDefinitions=dfDefinitions_processed_expanded,f.gp_clinical = fgp_clinical,f.gp_scripts = fgp_scripts,f.hesin = fhesin,f.hesin_diag = fhesin_diag,f.hesin_oper =fhesin_oper,f.death_portal = fdeath_portal,f.death_cause_portal = fdeath_cause_portal,allow_missing_fields = TRUE)
# saveRDS(lst.harmonized.data,"~/Dropbox/pheno_dir/lst.harmonized.data.rds")
lst.harmonized.data=readRDS("~/Library/CloudStorage/Dropbox-Personal//pheno_dir/lst.harmonized.data.rds")
# View(lst.harmonized.data$lst.data)
# View(lst.harmonized.data$lst.data$tte.hesin.icd10.primary)
# View(lst.harmonized.data$lst.data)
#
lst.harmonized.data<-harmonize_ukb_data(f.ukbtab = fukbtab,f.html = fhtml,dfDefinitions=dfDefinitions_processed_expanded,f.gp_clinical = fgp_clinical,f.gp_scripts = fgp_scripts,f.hesin = fhesin,f.hesin_diag = fhesin_diag,f.hesin_oper =fhesin_oper,f.death_portal = fdeath_portal,f.death_cause_portal = fdeath_cause_portal,allow_missing_fields = TRUE)
saveRDS(lst.harmonized.data,"~/Dropbox/pheno_dir/lst.harmonized.data.updated.rds")
saveRDS(lst.harmonized.data,"~/Library/CloudStorage/Dropbox/pheno_dir/lst.harmonized.data.updated.rds")
saveRDS(lst.harmonized.data,"~/Library/CloudStorage/Dropbox-Personal//pheno_dir/output/lst.harmonized.data.updated.rds")
lst.harmonized.data=readRDS("~/Library/CloudStorage/Dropbox-Personal//pheno_dir/output/lst.harmonized.data.updated.rds")
d4<-lst.harmonized.data$dfukb[,c("identifier","f.52.0.0","f.34.0.0")]
# # # f.34.0.0 contains year of birth, f.52 is month of birth, create birthday on 15th of month
lst.harmonized.data$dfukb$Birthdate<-as.Date(with(d4,paste(f.34.0.0,f.52.0.0,15,sep="-")),"%Y-%m-%d")
#
df_reference_dt_v0<-lst.harmonized.data$dfukb[,c("identifier","Birthdate")]
dfukb_baseline_pheno=readRDS("~/Library/CloudStorage/Dropbox-Personal/pheno_dir/output/dfukb_baseline_pheno.rds")
diseases<-dfDefinitions_processed_expanded$TRAIT[c(1,2,3,7,8,13,14,15,24,41,42,c(43:59))]
# Make an output folder to store the result
out_folder<-paste0(pheno_dir,"output/")
if(!dir.exists(file.path(out_folder))){
dir.create(file.path(out_folder))
}
# Loop through the traits, including family history of related diseases and the diabetes medication use
for (disease in diseases){
print(disease)
lst.case_control <- get_cases_controls(definitions=dfDefinitions_processed_expanded %>% filter(TRAIT==disease), lst.harmonized.data$lst.data,dfData.settings, df_reference_date=df_reference_dt_v0)
# Add the trait to the column names
colnames(lst.case_control$df.casecontrol) <- paste(disease,"0",colnames(lst.case_control$df.casecontrol), sep = "_")
# Except for participant identifier
names(lst.case_control$df.casecontrol)[names(lst.case_control$df.casecontrol) == paste(disease,"0","identifier", sep = "_")]<-"identifier"
# Merge these columns with dfukb_baseline_pheno
dfukb_baseline_pheno<-merge(dfukb_baseline_pheno,lst.case_control$df.casecontrol,by="identifier",all.x = TRUE,all.y = FALSE)
}
head(lst.harmonized.data)
head(dfukb_baseline_pheno)
head(dfukb_baseline_pheno)
head(dfukb_baseline_pheno[,c(1:10)]
)
head(dfukb_baseline_pheno[,c(1:10)])
diseases
dfukb_baseline_pheno=readRDS("~/Library/CloudStorage/Dropbox-Personal/pheno_dir/output/dfukb_baseline_pheno.rds")
diseases<-dfDefinitions_processed_expanded$TRAIT[c(1,2,3,7,8,13,14,15,24,41,42,c(43:59))]
disease in diseases
diseases[1]
disease=diseases[1]
print(disease)
lst.case_control <- get_cases_controls(definitions=dfDefinitions_processed_expanded %>% filter(TRAIT==disease), lst.harmonized.data$lst.data,dfData.settings, df_reference_date=df_reference_dt_v0)
# Add the trait to the column names
colnames(lst.case_control$df.casecontrol) <- paste(disease,"0",colnames(lst.case_control$df.casecontrol), sep = "_")
# Except for participant identifier
names(lst.case_control$df.casecontrol)[names(lst.case_control$df.casecontrol) == paste(disease,"0","identifier", sep = "_")]<-"identifier"
head(lst.case_control$df.casecontrol)
lst.case_control <- get_cases_controls(definitions=dfDefinitions_processed_expanded %>% filter(TRAIT==disease), lst.harmonized.data$lst.data,dfData.settings, df_reference_date=df_reference_dt_v0)
lst.case_control$df.casecontrol=lst.case_control$df.casecontrol[,c(identifier,Death_primary,first_diagnosis_days,Any)]
head(lst.case_control$df.casecontrol)
lst.case_control <- get_cases_controls(definitions=dfDefinitions_processed_expanded %>% filter(TRAIT==disease), lst.harmonized.data$lst.data,dfData.settings, df_reference_date=df_reference_dt_v0)
# Add the trait to the column names
lst.case_control$df.casecontrol=lst.case_control$df.casecontrol[,..c(identifier,Death_primary,first_diagnosis_days,Any)]
lst.case_control$df.casecontrol=lst.case_control$df.casecontrol[,...c(identifier,Death_primary,first_diagnosis_days,Any)]
lst.case_control$df.casecontrol=lst.case_control$df.casecontrol[,c("identifier","Death_primary","first_diagnosis_days","Any")]
head(lst.case_control$df.casecontrol)
colnames(lst.case_control$df.casecontrol) <- paste(disease,"0",colnames(lst.case_control$df.casecontrol), sep = "_")
# Except for participant identifier
names(lst.case_control$df.casecontrol)[names(lst.case_control$df.casecontrol) == paste(disease,"0","identifier", sep = "_")]<-"identifier"
head(lst.case_control$df.casecontrol)
lst.case_control$df.casecontrol=lst.case_control$df.casecontrol[,c("identifier","Death_primary","first_diagnosis_days","Any")]
lst.case_control <- get_cases_controls(definitions=dfDefinitions_processed_expanded %>% filter(TRAIT==disease), lst.harmonized.data$lst.data,dfData.settings, df_reference_date=df_reference_dt_v0)
# Add the trait to the column names
lst.case_control$df.casecontrol=lst.case_control$df.casecontrol[,c("identifier","Death_primary","first_diagnosis_days","Any")]
colnames(lst.case_control$df.casecontrol) <- paste(disease,colnames(lst.case_control$df.casecontrol), sep = "_")
# Except for partic
head(lst.case_control$df.casecontrol)
names(lst.case_control$df.casecontrol)[names(lst.case_control$df.casecontrol) == paste(disease,identifier", sep = "_")]<-"identifier"
names(lst.case_control$df.casecontrol)[names(lst.case_control$df.casecontrol) == paste(disease,"identifier", sep = "_")]<-"identifier"
head(lst.case_control$df.casecontrol)
dfukb_baseline_pheno<-merge(dfukb_baseline_pheno,lst.case_control$df.casecontrol,by="identifier",all.x = TRUE,all.y = FALSE)
# Loop through the traits, including family history of related diseases and the diabetes medication use
for (disease in diseases){
print(disease)
lst.case_control <- get_cases_controls(definitions=dfDefinitions_processed_expanded %>% filter(TRAIT==disease), lst.harmonized.data$lst.data,dfData.settings, df_reference_date=df_reference_dt_v0)
# Add the trait to the column names
lst.case_control$df.casecontrol=lst.case_control$df.casecontrol[,c("identifier","Death_primary","first_diagnosis_days","Any")]
colnames(lst.case_control$df.casecontrol) <- paste(disease,colnames(lst.case_control$df.casecontrol), sep = "_")
# Except for participant identifier
names(lst.case_control$df.casecontrol)[names(lst.case_control$df.casecontrol) == paste(disease,"identifier", sep = "_")]<-"identifier"
# Merge these columns with dfukb_baseline_pheno
dfukb_baseline_pheno<-merge(dfukb_baseline_pheno,lst.case_control$df.casecontrol,by="identifier",all.x = TRUE,all.y = FALSE)
}
head(dfukb_baseline_pheno)
head(dfukb_baseline_pheno)
dfukb_baseline_pheno=readRDS("~/Library/CloudStorage/Dropbox-Personal/pheno_dir/output/dfukb_baseline_pheno.rds")
head(dfukb_baseline_pheno)
head(dfukbaseline)
dfukb_baseline_pheno=readRDS("~/Library/CloudStorage/Dropbox-Personal/pheno_dir/output/dfukb_baseline.rds")
head(dfukb_baseline_pheno)
dfukb_baseline_pheno=readRDS("~/Library/CloudStorage/Dropbox-Personal/pheno_dir/output/dfukb_baseline.rds")
diseases<-dfDefinitions_processed_expanded$TRAIT[c(1,2,3,7,8,13,14,15,24,41,42,c(43:59))]
# Make an output folder to store the result
out_folder<-paste0(pheno_dir,"output/")
if(!dir.exists(file.path(out_folder))){
dir.create(file.path(out_folder))
}
# Loop through the traits, including family history of related diseases and the diabetes medication use
for (disease in diseases){
print(disease)
lst.case_control <- get_cases_controls(definitions=dfDefinitions_processed_expanded %>% filter(TRAIT==disease), lst.harmonized.data$lst.data,dfData.settings, df_reference_date=df_reference_dt_v0)
# Add the trait to the column names
lst.case_control$df.casecontrol=lst.case_control$df.casecontrol[,c("identifier","Death_primary","first_diagnosis_days","Any")]
colnames(lst.case_control$df.casecontrol) <- paste(disease,colnames(lst.case_control$df.casecontrol), sep = "_")
# Except for participant identifier
names(lst.case_control$df.casecontrol)[names(lst.case_control$df.casecontrol) == paste(disease,"identifier", sep = "_")]<-"identifier"
# Merge these columns with dfukb_baseline_pheno
dfukb_baseline_pheno<-merge(dfukb_baseline_pheno,lst.case_control$df.casecontrol,by="identifier",all.x = TRUE,all.y = FALSE)
}
head(dfukb_baseline_pheno)
grep(x=names(dfukb_baseline_pheno),pattern = "first_diagnosis_days")
g=grep(x=names(dfukb_baseline_pheno),pattern = "first_diagnosis_days")
dfukb_baseline_pheno[,.g]
dfukb_baseline_pheno[,..g]
dfukb_baseline_pheno[,...g]=dfukb_baseline_pheno[,...g]/365.25
g=grep(x=names(dfukb_baseline_pheno),pattern = "first_diagnosis_days")
dfukb_baseline_pheno[,...g]=dfukb_baseline_pheno[,...g]/365.25
dfukb_baseline_pheno[, (g) := lapply(.SD, function(x) x / 36.25), .SDcols = g]
head(dfukb_baseline_pheno)
dfukb_baseline_pheno=readRDS("~/Library/CloudStorage/Dropbox-Personal/pheno_dir/output/dfukb_baseline.rds")
diseases<-dfDefinitions_processed_expanded$TRAIT[c(1,2,3,7,8,13,14,15,24,41,42,c(43:59))]
# Make an output folder to store the result
out_folder<-paste0(pheno_dir,"output/")
if(!dir.exists(file.path(out_folder))){
dir.create(file.path(out_folder))
}
# Loop through the traits, including family history of related diseases and the diabetes medication use
for (disease in diseases){
print(disease)
lst.case_control <- get_cases_controls(definitions=dfDefinitions_processed_expanded %>% filter(TRAIT==disease), lst.harmonized.data$lst.data,dfData.settings, df_reference_date=df_reference_dt_v0)
# Add the trait to the column names
lst.case_control$df.casecontrol=lst.case_control$df.casecontrol[,c("identifier","Death_primary","first_diagnosis_days","Any")]
colnames(lst.case_control$df.casecontrol) <- paste(disease,colnames(lst.case_control$df.casecontrol), sep = "_")
# Except for participant identifier
names(lst.case_control$df.casecontrol)[names(lst.case_control$df.casecontrol) == paste(disease,"identifier", sep = "_")]<-"identifier"
# Merge these columns with dfukb_baseline_pheno
dfukb_baseline_pheno<-merge(dfukb_baseline_pheno,lst.case_control$df.casecontrol,by="identifier",all.x = TRUE,all.y = FALSE)
}
g=grep(x=names(dfukb_baseline_pheno),pattern = "first_diagnosis_days")
dfukb_baseline_pheno[, (g) := lapply(.SD, function(x) x / 365.25), .SDcols = g]
head(dfukb_baseline_pheno)
dfukb_baseline_pheno[dfukb_baseline_pheno$f.54.0.0 %in% england,"censordateHES"]<-as.Date("2021-03-31")
dfukb_baseline_pheno[dfukb_baseline_pheno$f.54.0.0 %in% scotland,"censordateHES"]<-as.Date("2021-03-31")
dfukb_baseline_pheno[dfukb_baseline_pheno$f.54.0.0 %in% wales,"censordateHES"]<-as.Date("2018-02-28")
lst.case_control <- get_cases_controls(definitions=dfDefinitions_processed_expanded %>% filter(TRAIT==disease), lst.harmonized.data$lst.data,dfData.settings, df_reference_date=df_reference_dt_v0)
head(lst.case_control$df.casecontrol)
# Add the trait to the column names
lst.case_control$df.casecontrol=lst.case_control$df.casecontrol[,c("identifier","Death_primary","Death_any","first_diagnosis_days","Any")]
colnames(lst.case_control$df.casecontrol) <- paste(disease,colnames(lst.case_control$df.casecontrol), sep = "_")
# Except for participant identifier
names(lst.case_control$df.casecontrol)[names(lst.case_control$df.casecontrol) == paste(disease,"identifier", sep = "_")]<-"identifier"
# Merge these columns with dfukb_baseline_pheno
dfukb_baseline_pheno<-merge(dfukb_baseline_pheno,lst.case_control$df.casecontrol,by="identifier",all.x = TRUE,all.y = FALSE)
england<-c("10003","11001","11002","11007","11008","11009","11010","11011","11012","11013","11014","11016","11017","11018","11019","11020","11021")
scotland<-c("11004","11005")
wales<-c("11003","11022", "11006","11023")
# # Corresponding censoring dates
# ## from ming
#
# ****** DEATH
# 30sep2021 England/ Wales
# 31oct2021 Scotland
#
# ******HESIN
# 30sep2021
# 31jul2021
# 28feb2018
#
# ##
dfukb_baseline_pheno[dfukb_baseline_pheno$f.54.0.0 %in% england,"censordateHES"]<-as.Date("2021-03-31")
dfukb_baseline_pheno[dfukb_baseline_pheno$f.54.0.0 %in% scotland,"censordateHES"]<-as.Date("2021-03-31")
dfukb_baseline_pheno[dfukb_baseline_pheno$f.54.0.0 %in% wales,"censordateHES"]<-as.Date("2018-02-28")
# Get death dates from data
deathdt<-unique(lst.harmonized.data$lst.data$tte.death.icd10.primary[,.(identifier,eventdate)])
head(dfukb_baseline_pheno)
range(na.omit(dfukb_baseline_pheno[Cad_Any==2,Cad_first_diagnosis_days]))
range(na.omit(dfukb_baseline_pheno[Ht_0_Fu==2,Ht_0_first_diagnosis_days]))
range(na.omit(dfukb_baseline_pheno[Ht_0_Any==2,Ht_0_first_diagnosis_days]))
range(na.omit(dfukb_baseline_pheno[Ht_Any==2,Ht_first_diagnosis_days]))
range(na.omit(dfukb_baseline_pheno[Dm_Any==2,Dm_first_diagnosis_days]))
range(na.omit(dfukb_baseline_pheno[Ht_Any==2,Ht_first_diagnosis_days]))
range(na.omit(dfukb_baseline_pheno[DmT2_Any==2,DmT2_first_diagnosis_days]))
range(na.omit(dfukb_baseline_pheno[HyperLip_Any==2,HyperLip_first_diagnosis_days]))
disease
grep(names(dfukb_baseline_pheno),disease)
grep(x = names(dfukb_baseline_pheno),pattern = disease)
g=grep(x=names(dfukb_baseline_pheno),pattern =disease)
dfukb_baseline_pheno[,...g]
dfukb_baseline_pheno[,...g]
class(dfukb_baseline_pheno)
dfukb_baseline_pheno[,..g]
s2=dfukb_baseline_pheno[,..g]
head(s2)
if(s2[,..s2])
deathdt<-unique(lst.harmonized.data$lst.data$tte.death.icd10.primary[,.(identifier,eventdate)])
deathdt<-unique(lst.harmonized.data$lst.data$tte.death.icd10.primary[,.(identifier,eventdate)])
dfukb_baseline_pheno$Death_age=ifelse(!is.na(deathdt),difftime(deathdt,dfukb_baseline_pheno$Birthdate,units = "days")/365.25,difftime(dfukb_baseline_pheno$censordateHES,dfukb_baseline_pheno$Birthdate,units = "days")/365.25)
head(deathdt)
dfukb_baseline_pheno=merge(dfukb_baseline_pheno,deathdt,by = "identifier")
dfukb_baseline_pheno$Death_age=ifelse(!is.na(deathdt),difftime(dfukb_baseline_pheno$deathdt,dfukb_baseline_pheno$Birthdate,units = "days")/365.25,difftime(dfukb_baseline_pheno$censordateHES,dfukb_baseline_pheno$Birthdate,units = "days")/365.25)
deathdt<-unique(lst.harmonized.data$lst.data$tte.death.icd10.primary[,.(identifier,eventdate)])
dfukb_baseline_pheno=merge(dfukb_baseline_pheno,deathdt,by = "identifier")
dfukb_baseline_pheno$Death_age=ifelse(!is.na(dfukb_baseline_pheno$deathdt),difftime(dfukb_baseline_pheno$deathdt,dfukb_baseline_pheno$Birthdate,units = "days")/365.25,difftime(dfukb_baseline_pheno$censordateHES,dfukb_baseline_pheno$Birthdate,units = "days")/365.25)
head(dfukb_baseline_pheno)
dfukb_baseline_pheno$deathdt
dfukb_baseline_pheno=merge(dfukb_baseline_pheno,deathdt,by = "identifier")
head(deathdt)
deathdt<-unique(lst.harmonized.data$lst.data$tte.death.icd10.primary[,.(identifier,eventdate)])
names(deathdt)=c("identifier","deathdt")
dfukb_baseline_pheno=merge(dfukb_baseline_pheno,deathdt,by = "identifier")
head(dfukb_baseline_pheno)
for (disease in diseases){
print(disease)
lst.case_control <- get_cases_controls(definitions=dfDefinitions_processed_expanded %>% filter(TRAIT==disease), lst.harmonized.data$lst.data,dfData.settings, df_reference_date=df_reference_dt_v0)
# Add the trait to the column names
lst.case_control$df.casecontrol=lst.case_control$df.casecontrol[,c("identifier","Death_primary","Death_any","first_diagnosis_days","Any")]
colnames(lst.case_control$df.casecontrol) <- paste(disease,colnames(lst.case_control$df.casecontrol), sep = "_")
# Except for participant identifier
names(lst.case_control$df.casecontrol)[names(lst.case_control$df.casecontrol) == paste(disease,"identifier", sep = "_")]<-"identifier"
# Merge these columns with dfukb_baseline_pheno
dfukb_baseline_pheno<-merge(dfukb_baseline_pheno,lst.case_control$df.casecontrol,by="identifier",all.x = TRUE,all.y = FALSE)
}
g=grep(x=names(dfukb_baseline_pheno),pattern = "first_diagnosis_days")
dfukb_baseline_pheno[, (g) := lapply(.SD, function(x) x / 365.25), .SDcols = g]
england<-c("10003","11001","11002","11007","11008","11009","11010","11011","11012","11013","11014","11016","11017","11018","11019","11020","11021")
scotland<-c("11004","11005")
wales<-c("11003","11022", "11006","11023")
# # Corresponding censoring dates
# ## from ming
#
# ****** DEATH
# 30sep2021 England/ Wales
# 31oct2021 Scotland
#
# ******HESIN
# 30sep2021
# 31jul2021
# 28feb2018
#
# ##
dfukb_baseline_pheno[dfukb_baseline_pheno$f.54.0.0 %in% england,"censordateHES"]<-as.Date("2021-03-31")
dfukb_baseline_pheno[dfukb_baseline_pheno$f.54.0.0 %in% scotland,"censordateHES"]<-as.Date("2021-03-31")
dfukb_baseline_pheno[dfukb_baseline_pheno$f.54.0.0 %in% wales,"censordateHES"]<-as.Date("2018-02-28")
# Get death dates from data
deathdt<-unique(lst.harmonized.data$lst.data$tte.death.icd10.primary[,.(identifier,eventdate)])
names(deathdt)=c("identifier","deathdt")
dfukb_baseline_pheno=merge(dfukb_baseline_pheno,deathdt,by = "identifier")
head(dfukb_baseline_pheno)
