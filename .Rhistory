for(i in 1:length(diseases)){
name=paste0(diseases[i],"_0_Any");
}
pheno_dir
hesindir="~/Documents/"
fhesin <- paste(hesin_dir,"hesin.txt.gz",sep="")
hesin_dir="~/Documents/"
fhesin <- paste(hesin_dir,"hesin.txt.gz",sep="")
fhesin_diag <- paste(hesin_dir,"hesin_diag.txt.gz",sep="")
fhesin_oper <- paste(hesin_dir,"hesin_oper.txt.gz",sep="")
lst.harmonized.data<-harmonize_ukb_data(f.ukbtab = fukbtab,f.html = fhtml,dfDefinitions=dfDefinitions_processed_expanded,f.gp_clinical = fgp_clinical,f.gp_scripts = fgp_scripts,f.hesin = fhesin,f.hesin_diag = fhesin_diag,f.hesin_oper =fhesin_oper,f.death_portal = fdeath_portal,f.death_cause_portal = fdeath_cause_portal,allow_missing_fields = TRUE)
gp_reg=fread("~/Dropbox/ukb+gp/gp_registrations.txt")
gp_reg=fread("~/Library/CloudStorage/Dropbox-Personal//ukb+gp/gp_registrations.txt")
gp_folks=unique(gp_reg$eid)
### only use gp
fukbtab <- paste(pheno_dir,"ukb47823.tab",sep="")
# meta data file
fhtml <- paste(pheno_dir,"ukb47823.html",sep="")
# hospital inpatient data
hesin_dir="~/Documents/"
fhesin <- paste(hesin_dir,"hesin.txt.gz",sep="")
fhesin_diag <- paste(hesin_dir,"hesin_diag.txt.gz",sep="")
fhesin_oper <- paste(hesin_dir,"hesin_oper.txt.gz",sep="")
# GP data
fgp_clinical <- paste(pheno_dir,"ukb_showcase_9.01/gp_clinical.txt",sep="")
fgp_scripts <- paste(pheno_dir,"ukb_showcase_9.01/gp_scripts.txt",sep="")
# Death registry
fdeath_portal <- paste(pheno_dir,"ukb_showcase_9.01/death.txt",sep="")
fdeath_cause_portal <- paste(pheno_dir,"ukb_showcase_9.01/death_cause.txt",sep="")
extdata_dir <- paste0(system.file("extdata", package="ukbpheno"),"/")
fdata_setting <- paste0(extdata_dir,"data.settings.tsv")
dfData.settings <- fread(fdata_setting)
## clinical stuff and dfData settings and send Ming the likelihood infromation on time-dependent coefficients
# exp=which(dfData.settings$classification=="BNF")
# dfData.settings$expand_codes[exp]=1
#fdefinitions <- paste0(extdata_dir,"definitions_cardiometabolic_traits.tsv")
fdefinitions="~/Library/CloudStorage/Dropbox-Personal/definitions_cardiometabolic_traits.tsv"
dfDefinitions_processed_expanded<-read_definition_table(fdefinitions,fdata_setting,extdata_dir)
lst.harmonized.data<-harmonize_ukb_data(f.ukbtab = fukbtab,f.html = fhtml,dfDefinitions=dfDefinitions_processed_expanded,f.gp_clinical = fgp_clinical,f.gp_scripts = fgp_scripts,f.hesin = fhesin,f.hesin_diag = fhesin_diag,f.hesin_oper =fhesin_oper,f.death_portal = fdeath_portal,f.death_cause_portal = fdeath_cause_portal,allow_missing_fields = TRUE)
hesin_dir="~/Documents/hesin_May2023"
fhesin <- paste(hesin_dir,"hesin.txt.gz",sep="")
fhesin_diag <- paste(hesin_dir,"hesin_diag.txt.gz",sep="")
fhesin_oper <- paste(hesin_dir,"hesin_oper.txt.gz",sep="")
hesin_dir="~/Documents/hesin_May2023/"
fhesin <- paste(hesin_dir,"hesin.txt.gz",sep="")
fhesin_diag <- paste(hesin_dir,"hesin_diag.txt.gz",sep="")
fhesin_oper <- paste(hesin_dir,"hesin_oper.txt.gz",sep="")
head(fhesin)
h=fread(fhesin)
gp_reg=fread("~/Library/CloudStorage/Dropbox-Personal//ukb+gp/gp_registrations.txt")
gp_folks=unique(gp_reg$eid)
### only use gp
fukbtab <- paste(pheno_dir,"ukb47823.tab",sep="")
# meta data file
fhtml <- paste(pheno_dir,"ukb47823.html",sep="")
# hospital inpatient data
hesin_dir="~/Documents/hesin_May2023/"
fhesin <- paste(hesin_dir,"hesin.txt.gz",sep="")
fhesin_diag <- paste(hesin_dir,"hesin_diag.txt.gz",sep="")
fhesin_oper <- paste(hesin_dir,"hesin_oper.txt.gz",sep="")
# GP data
fgp_clinical <- paste(pheno_dir,"ukb_showcase_9.01/gp_clinical.txt",sep="")
fgp_scripts <- paste(pheno_dir,"ukb_showcase_9.01/gp_scripts.txt",sep="")
# Death registry
fdeath_portal <- paste(pheno_dir,"ukb_showcase_9.01/death.txt",sep="")
fdeath_cause_portal <- paste(pheno_dir,"ukb_showcase_9.01/death_cause.txt",sep="")
extdata_dir <- paste0(system.file("extdata", package="ukbpheno"),"/")
fdata_setting <- paste0(extdata_dir,"data.settings.tsv")
dfData.settings <- fread(fdata_setting)
## clinical stuff and dfData settings and send Ming the likelihood infromation on time-dependent coefficients
# exp=which(dfData.settings$classification=="BNF")
# dfData.settings$expand_codes[exp]=1
#fdefinitions <- paste0(extdata_dir,"definitions_cardiometabolic_traits.tsv")
fdefinitions="~/Library/CloudStorage/Dropbox-Personal/definitions_cardiometabolic_traits.tsv"
dfDefinitions_processed_expanded<-read_definition_table(fdefinitions,fdata_setting,extdata_dir)
# dfDefinitions_processed_expanded$BNF[dfDefinitions_processed_expanded$TRAIT=="RxHt"]=unique(hypertension$bnf_code)
# dfDefinitions_processed_expanded$DMD[dfDefinitions_processed_expanded$TRAIT=="RxHt"]=unique(hypertension$dmd_code)
# harmonize the data
lst.harmonized.data<-harmonize_ukb_data(f.ukbtab = fukbtab,f.html = fhtml,dfDefinitions=dfDefinitions_processed_expanded,f.gp_clinical = fgp_clinical,f.gp_scripts = fgp_scripts,f.hesin = fhesin,f.hesin_diag = fhesin_diag,f.hesin_oper =fhesin_oper,f.death_portal = fdeath_portal,f.death_cause_portal = fdeath_cause_portal,allow_missing_fields = TRUE)
# saveRDS(lst.harmonized.data,"~/Dropbox/pheno_dir/lst.harmonized.data.rds")
lst.harmonized.data=readRDS("~/Library/CloudStorage/Dropbox-Personal//pheno_dir/lst.harmonized.data.rds")
# View(lst.harmonized.data$lst.data)
# View(lst.harmonized.data$lst.data$tte.hesin.icd10.primary)
# View(lst.harmonized.data$lst.data)
#
lst.harmonized.data<-harmonize_ukb_data(f.ukbtab = fukbtab,f.html = fhtml,dfDefinitions=dfDefinitions_processed_expanded,f.gp_clinical = fgp_clinical,f.gp_scripts = fgp_scripts,f.hesin = fhesin,f.hesin_diag = fhesin_diag,f.hesin_oper =fhesin_oper,f.death_portal = fdeath_portal,f.death_cause_portal = fdeath_cause_portal,allow_missing_fields = TRUE)
saveRDS(lst.harmonized.data,"~/Dropbox/pheno_dir/lst.harmonized.data.updated.rds")
saveRDS(lst.harmonized.data,"~/Library/CloudStorage/Dropbox/pheno_dir/lst.harmonized.data.updated.rds")
saveRDS(lst.harmonized.data,"~/Library/CloudStorage/Dropbox-Personal//pheno_dir/output/lst.harmonized.data.updated.rds")
lst.harmonized.data=readRDS("~/Library/CloudStorage/Dropbox-Personal//pheno_dir/output/lst.harmonized.data.updated.rds")
d4<-lst.harmonized.data$dfukb[,c("identifier","f.52.0.0","f.34.0.0")]
# # # f.34.0.0 contains year of birth, f.52 is month of birth, create birthday on 15th of month
lst.harmonized.data$dfukb$Birthdate<-as.Date(with(d4,paste(f.34.0.0,f.52.0.0,15,sep="-")),"%Y-%m-%d")
#
df_reference_dt_v0<-lst.harmonized.data$dfukb[,c("identifier","Birthdate")]
dfukb_baseline_pheno=readRDS("~/Library/CloudStorage/Dropbox-Personal/pheno_dir/output/dfukb_baseline_pheno.rds")
diseases<-dfDefinitions_processed_expanded$TRAIT[c(1,2,3,7,8,13,14,15,24,41,42,c(43:59))]
# Make an output folder to store the result
out_folder<-paste0(pheno_dir,"output/")
if(!dir.exists(file.path(out_folder))){
dir.create(file.path(out_folder))
}
# Loop through the traits, including family history of related diseases and the diabetes medication use
for (disease in diseases){
print(disease)
lst.case_control <- get_cases_controls(definitions=dfDefinitions_processed_expanded %>% filter(TRAIT==disease), lst.harmonized.data$lst.data,dfData.settings, df_reference_date=df_reference_dt_v0)
# Add the trait to the column names
colnames(lst.case_control$df.casecontrol) <- paste(disease,"0",colnames(lst.case_control$df.casecontrol), sep = "_")
# Except for participant identifier
names(lst.case_control$df.casecontrol)[names(lst.case_control$df.casecontrol) == paste(disease,"0","identifier", sep = "_")]<-"identifier"
# Merge these columns with dfukb_baseline_pheno
dfukb_baseline_pheno<-merge(dfukb_baseline_pheno,lst.case_control$df.casecontrol,by="identifier",all.x = TRUE,all.y = FALSE)
}
head(lst.harmonized.data)
head(dfukb_baseline_pheno)
head(dfukb_baseline_pheno)
head(dfukb_baseline_pheno[,c(1:10)]
)
head(dfukb_baseline_pheno[,c(1:10)])
diseases
dfukb_baseline_pheno=readRDS("~/Library/CloudStorage/Dropbox-Personal/pheno_dir/output/dfukb_baseline_pheno.rds")
diseases<-dfDefinitions_processed_expanded$TRAIT[c(1,2,3,7,8,13,14,15,24,41,42,c(43:59))]
disease in diseases
diseases[1]
disease=diseases[1]
print(disease)
lst.case_control <- get_cases_controls(definitions=dfDefinitions_processed_expanded %>% filter(TRAIT==disease), lst.harmonized.data$lst.data,dfData.settings, df_reference_date=df_reference_dt_v0)
# Add the trait to the column names
colnames(lst.case_control$df.casecontrol) <- paste(disease,"0",colnames(lst.case_control$df.casecontrol), sep = "_")
# Except for participant identifier
names(lst.case_control$df.casecontrol)[names(lst.case_control$df.casecontrol) == paste(disease,"0","identifier", sep = "_")]<-"identifier"
head(lst.case_control$df.casecontrol)
lst.case_control <- get_cases_controls(definitions=dfDefinitions_processed_expanded %>% filter(TRAIT==disease), lst.harmonized.data$lst.data,dfData.settings, df_reference_date=df_reference_dt_v0)
lst.case_control$df.casecontrol=lst.case_control$df.casecontrol[,c(identifier,Death_primary,first_diagnosis_days,Any)]
head(lst.case_control$df.casecontrol)
lst.case_control <- get_cases_controls(definitions=dfDefinitions_processed_expanded %>% filter(TRAIT==disease), lst.harmonized.data$lst.data,dfData.settings, df_reference_date=df_reference_dt_v0)
# Add the trait to the column names
lst.case_control$df.casecontrol=lst.case_control$df.casecontrol[,..c(identifier,Death_primary,first_diagnosis_days,Any)]
lst.case_control$df.casecontrol=lst.case_control$df.casecontrol[,...c(identifier,Death_primary,first_diagnosis_days,Any)]
lst.case_control$df.casecontrol=lst.case_control$df.casecontrol[,c("identifier","Death_primary","first_diagnosis_days","Any")]
head(lst.case_control$df.casecontrol)
colnames(lst.case_control$df.casecontrol) <- paste(disease,"0",colnames(lst.case_control$df.casecontrol), sep = "_")
# Except for participant identifier
names(lst.case_control$df.casecontrol)[names(lst.case_control$df.casecontrol) == paste(disease,"0","identifier", sep = "_")]<-"identifier"
head(lst.case_control$df.casecontrol)
lst.case_control$df.casecontrol=lst.case_control$df.casecontrol[,c("identifier","Death_primary","first_diagnosis_days","Any")]
lst.case_control <- get_cases_controls(definitions=dfDefinitions_processed_expanded %>% filter(TRAIT==disease), lst.harmonized.data$lst.data,dfData.settings, df_reference_date=df_reference_dt_v0)
# Add the trait to the column names
lst.case_control$df.casecontrol=lst.case_control$df.casecontrol[,c("identifier","Death_primary","first_diagnosis_days","Any")]
colnames(lst.case_control$df.casecontrol) <- paste(disease,colnames(lst.case_control$df.casecontrol), sep = "_")
# Except for partic
head(lst.case_control$df.casecontrol)
names(lst.case_control$df.casecontrol)[names(lst.case_control$df.casecontrol) == paste(disease,identifier", sep = "_")]<-"identifier"
names(lst.case_control$df.casecontrol)[names(lst.case_control$df.casecontrol) == paste(disease,"identifier", sep = "_")]<-"identifier"
head(lst.case_control$df.casecontrol)
dfukb_baseline_pheno<-merge(dfukb_baseline_pheno,lst.case_control$df.casecontrol,by="identifier",all.x = TRUE,all.y = FALSE)
# Loop through the traits, including family history of related diseases and the diabetes medication use
for (disease in diseases){
print(disease)
lst.case_control <- get_cases_controls(definitions=dfDefinitions_processed_expanded %>% filter(TRAIT==disease), lst.harmonized.data$lst.data,dfData.settings, df_reference_date=df_reference_dt_v0)
# Add the trait to the column names
lst.case_control$df.casecontrol=lst.case_control$df.casecontrol[,c("identifier","Death_primary","first_diagnosis_days","Any")]
colnames(lst.case_control$df.casecontrol) <- paste(disease,colnames(lst.case_control$df.casecontrol), sep = "_")
# Except for participant identifier
names(lst.case_control$df.casecontrol)[names(lst.case_control$df.casecontrol) == paste(disease,"identifier", sep = "_")]<-"identifier"
# Merge these columns with dfukb_baseline_pheno
dfukb_baseline_pheno<-merge(dfukb_baseline_pheno,lst.case_control$df.casecontrol,by="identifier",all.x = TRUE,all.y = FALSE)
}
head(dfukb_baseline_pheno)
head(dfukb_baseline_pheno)
dfukb_baseline_pheno=readRDS("~/Library/CloudStorage/Dropbox-Personal/pheno_dir/output/dfukb_baseline_pheno.rds")
head(dfukb_baseline_pheno)
head(dfukbaseline)
dfukb_baseline_pheno=readRDS("~/Library/CloudStorage/Dropbox-Personal/pheno_dir/output/dfukb_baseline.rds")
head(dfukb_baseline_pheno)
dfukb_baseline_pheno=readRDS("~/Library/CloudStorage/Dropbox-Personal/pheno_dir/output/dfukb_baseline.rds")
diseases<-dfDefinitions_processed_expanded$TRAIT[c(1,2,3,7,8,13,14,15,24,41,42,c(43:59))]
# Make an output folder to store the result
out_folder<-paste0(pheno_dir,"output/")
if(!dir.exists(file.path(out_folder))){
dir.create(file.path(out_folder))
}
# Loop through the traits, including family history of related diseases and the diabetes medication use
for (disease in diseases){
print(disease)
lst.case_control <- get_cases_controls(definitions=dfDefinitions_processed_expanded %>% filter(TRAIT==disease), lst.harmonized.data$lst.data,dfData.settings, df_reference_date=df_reference_dt_v0)
# Add the trait to the column names
lst.case_control$df.casecontrol=lst.case_control$df.casecontrol[,c("identifier","Death_primary","first_diagnosis_days","Any")]
colnames(lst.case_control$df.casecontrol) <- paste(disease,colnames(lst.case_control$df.casecontrol), sep = "_")
# Except for participant identifier
names(lst.case_control$df.casecontrol)[names(lst.case_control$df.casecontrol) == paste(disease,"identifier", sep = "_")]<-"identifier"
# Merge these columns with dfukb_baseline_pheno
dfukb_baseline_pheno<-merge(dfukb_baseline_pheno,lst.case_control$df.casecontrol,by="identifier",all.x = TRUE,all.y = FALSE)
}
head(dfukb_baseline_pheno)
grep(x=names(dfukb_baseline_pheno),pattern = "first_diagnosis_days")
g=grep(x=names(dfukb_baseline_pheno),pattern = "first_diagnosis_days")
dfukb_baseline_pheno[,.g]
dfukb_baseline_pheno[,..g]
dfukb_baseline_pheno[,...g]=dfukb_baseline_pheno[,...g]/365.25
g=grep(x=names(dfukb_baseline_pheno),pattern = "first_diagnosis_days")
dfukb_baseline_pheno[,...g]=dfukb_baseline_pheno[,...g]/365.25
dfukb_baseline_pheno[, (g) := lapply(.SD, function(x) x / 36.25), .SDcols = g]
head(dfukb_baseline_pheno)
dfukb_baseline_pheno=readRDS("~/Library/CloudStorage/Dropbox-Personal/pheno_dir/output/dfukb_baseline.rds")
diseases<-dfDefinitions_processed_expanded$TRAIT[c(1,2,3,7,8,13,14,15,24,41,42,c(43:59))]
# Make an output folder to store the result
out_folder<-paste0(pheno_dir,"output/")
if(!dir.exists(file.path(out_folder))){
dir.create(file.path(out_folder))
}
# Loop through the traits, including family history of related diseases and the diabetes medication use
for (disease in diseases){
print(disease)
lst.case_control <- get_cases_controls(definitions=dfDefinitions_processed_expanded %>% filter(TRAIT==disease), lst.harmonized.data$lst.data,dfData.settings, df_reference_date=df_reference_dt_v0)
# Add the trait to the column names
lst.case_control$df.casecontrol=lst.case_control$df.casecontrol[,c("identifier","Death_primary","first_diagnosis_days","Any")]
colnames(lst.case_control$df.casecontrol) <- paste(disease,colnames(lst.case_control$df.casecontrol), sep = "_")
# Except for participant identifier
names(lst.case_control$df.casecontrol)[names(lst.case_control$df.casecontrol) == paste(disease,"identifier", sep = "_")]<-"identifier"
# Merge these columns with dfukb_baseline_pheno
dfukb_baseline_pheno<-merge(dfukb_baseline_pheno,lst.case_control$df.casecontrol,by="identifier",all.x = TRUE,all.y = FALSE)
}
g=grep(x=names(dfukb_baseline_pheno),pattern = "first_diagnosis_days")
dfukb_baseline_pheno[, (g) := lapply(.SD, function(x) x / 365.25), .SDcols = g]
head(dfukb_baseline_pheno)
dfukb_baseline_pheno[dfukb_baseline_pheno$f.54.0.0 %in% england,"censordateHES"]<-as.Date("2021-03-31")
dfukb_baseline_pheno[dfukb_baseline_pheno$f.54.0.0 %in% scotland,"censordateHES"]<-as.Date("2021-03-31")
dfukb_baseline_pheno[dfukb_baseline_pheno$f.54.0.0 %in% wales,"censordateHES"]<-as.Date("2018-02-28")
lst.case_control <- get_cases_controls(definitions=dfDefinitions_processed_expanded %>% filter(TRAIT==disease), lst.harmonized.data$lst.data,dfData.settings, df_reference_date=df_reference_dt_v0)
head(lst.case_control$df.casecontrol)
# Add the trait to the column names
lst.case_control$df.casecontrol=lst.case_control$df.casecontrol[,c("identifier","Death_primary","Death_any","first_diagnosis_days","Any")]
colnames(lst.case_control$df.casecontrol) <- paste(disease,colnames(lst.case_control$df.casecontrol), sep = "_")
# Except for participant identifier
names(lst.case_control$df.casecontrol)[names(lst.case_control$df.casecontrol) == paste(disease,"identifier", sep = "_")]<-"identifier"
# Merge these columns with dfukb_baseline_pheno
dfukb_baseline_pheno<-merge(dfukb_baseline_pheno,lst.case_control$df.casecontrol,by="identifier",all.x = TRUE,all.y = FALSE)
england<-c("10003","11001","11002","11007","11008","11009","11010","11011","11012","11013","11014","11016","11017","11018","11019","11020","11021")
scotland<-c("11004","11005")
wales<-c("11003","11022", "11006","11023")
# # Corresponding censoring dates
# ## from ming
#
# ****** DEATH
# 30sep2021 England/ Wales
# 31oct2021 Scotland
#
# ******HESIN
# 30sep2021
# 31jul2021
# 28feb2018
#
# ##
dfukb_baseline_pheno[dfukb_baseline_pheno$f.54.0.0 %in% england,"censordateHES"]<-as.Date("2021-03-31")
dfukb_baseline_pheno[dfukb_baseline_pheno$f.54.0.0 %in% scotland,"censordateHES"]<-as.Date("2021-03-31")
dfukb_baseline_pheno[dfukb_baseline_pheno$f.54.0.0 %in% wales,"censordateHES"]<-as.Date("2018-02-28")
# Get death dates from data
deathdt<-unique(lst.harmonized.data$lst.data$tte.death.icd10.primary[,.(identifier,eventdate)])
head(dfukb_baseline_pheno)
range(na.omit(dfukb_baseline_pheno[Cad_Any==2,Cad_first_diagnosis_days]))
range(na.omit(dfukb_baseline_pheno[Ht_0_Fu==2,Ht_0_first_diagnosis_days]))
range(na.omit(dfukb_baseline_pheno[Ht_0_Any==2,Ht_0_first_diagnosis_days]))
range(na.omit(dfukb_baseline_pheno[Ht_Any==2,Ht_first_diagnosis_days]))
range(na.omit(dfukb_baseline_pheno[Dm_Any==2,Dm_first_diagnosis_days]))
range(na.omit(dfukb_baseline_pheno[Ht_Any==2,Ht_first_diagnosis_days]))
range(na.omit(dfukb_baseline_pheno[DmT2_Any==2,DmT2_first_diagnosis_days]))
range(na.omit(dfukb_baseline_pheno[HyperLip_Any==2,HyperLip_first_diagnosis_days]))
disease
grep(names(dfukb_baseline_pheno),disease)
grep(x = names(dfukb_baseline_pheno),pattern = disease)
g=grep(x=names(dfukb_baseline_pheno),pattern =disease)
dfukb_baseline_pheno[,...g]
dfukb_baseline_pheno[,...g]
class(dfukb_baseline_pheno)
dfukb_baseline_pheno[,..g]
s2=dfukb_baseline_pheno[,..g]
head(s2)
if(s2[,..s2])
deathdt<-unique(lst.harmonized.data$lst.data$tte.death.icd10.primary[,.(identifier,eventdate)])
deathdt<-unique(lst.harmonized.data$lst.data$tte.death.icd10.primary[,.(identifier,eventdate)])
dfukb_baseline_pheno$Death_age=ifelse(!is.na(deathdt),difftime(deathdt,dfukb_baseline_pheno$Birthdate,units = "days")/365.25,difftime(dfukb_baseline_pheno$censordateHES,dfukb_baseline_pheno$Birthdate,units = "days")/365.25)
head(deathdt)
dfukb_baseline_pheno=merge(dfukb_baseline_pheno,deathdt,by = "identifier")
dfukb_baseline_pheno$Death_age=ifelse(!is.na(deathdt),difftime(dfukb_baseline_pheno$deathdt,dfukb_baseline_pheno$Birthdate,units = "days")/365.25,difftime(dfukb_baseline_pheno$censordateHES,dfukb_baseline_pheno$Birthdate,units = "days")/365.25)
deathdt<-unique(lst.harmonized.data$lst.data$tte.death.icd10.primary[,.(identifier,eventdate)])
dfukb_baseline_pheno=merge(dfukb_baseline_pheno,deathdt,by = "identifier")
dfukb_baseline_pheno$Death_age=ifelse(!is.na(dfukb_baseline_pheno$deathdt),difftime(dfukb_baseline_pheno$deathdt,dfukb_baseline_pheno$Birthdate,units = "days")/365.25,difftime(dfukb_baseline_pheno$censordateHES,dfukb_baseline_pheno$Birthdate,units = "days")/365.25)
head(dfukb_baseline_pheno)
dfukb_baseline_pheno$deathdt
dfukb_baseline_pheno=merge(dfukb_baseline_pheno,deathdt,by = "identifier")
head(deathdt)
deathdt<-unique(lst.harmonized.data$lst.data$tte.death.icd10.primary[,.(identifier,eventdate)])
names(deathdt)=c("identifier","deathdt")
dfukb_baseline_pheno=merge(dfukb_baseline_pheno,deathdt,by = "identifier")
head(dfukb_baseline_pheno)
for (disease in diseases){
print(disease)
lst.case_control <- get_cases_controls(definitions=dfDefinitions_processed_expanded %>% filter(TRAIT==disease), lst.harmonized.data$lst.data,dfData.settings, df_reference_date=df_reference_dt_v0)
# Add the trait to the column names
lst.case_control$df.casecontrol=lst.case_control$df.casecontrol[,c("identifier","Death_primary","Death_any","first_diagnosis_days","Any")]
colnames(lst.case_control$df.casecontrol) <- paste(disease,colnames(lst.case_control$df.casecontrol), sep = "_")
# Except for participant identifier
names(lst.case_control$df.casecontrol)[names(lst.case_control$df.casecontrol) == paste(disease,"identifier", sep = "_")]<-"identifier"
# Merge these columns with dfukb_baseline_pheno
dfukb_baseline_pheno<-merge(dfukb_baseline_pheno,lst.case_control$df.casecontrol,by="identifier",all.x = TRUE,all.y = FALSE)
}
g=grep(x=names(dfukb_baseline_pheno),pattern = "first_diagnosis_days")
dfukb_baseline_pheno[, (g) := lapply(.SD, function(x) x / 365.25), .SDcols = g]
england<-c("10003","11001","11002","11007","11008","11009","11010","11011","11012","11013","11014","11016","11017","11018","11019","11020","11021")
scotland<-c("11004","11005")
wales<-c("11003","11022", "11006","11023")
# # Corresponding censoring dates
# ## from ming
#
# ****** DEATH
# 30sep2021 England/ Wales
# 31oct2021 Scotland
#
# ******HESIN
# 30sep2021
# 31jul2021
# 28feb2018
#
# ##
dfukb_baseline_pheno[dfukb_baseline_pheno$f.54.0.0 %in% england,"censordateHES"]<-as.Date("2021-03-31")
dfukb_baseline_pheno[dfukb_baseline_pheno$f.54.0.0 %in% scotland,"censordateHES"]<-as.Date("2021-03-31")
dfukb_baseline_pheno[dfukb_baseline_pheno$f.54.0.0 %in% wales,"censordateHES"]<-as.Date("2018-02-28")
# Get death dates from data
deathdt<-unique(lst.harmonized.data$lst.data$tte.death.icd10.primary[,.(identifier,eventdate)])
names(deathdt)=c("identifier","deathdt")
dfukb_baseline_pheno=merge(dfukb_baseline_pheno,deathdt,by = "identifier")
head(dfukb_baseline_pheno)
library(MSGene)
statusarray
```{r}
nstates=c("Health","Ht","HyperLip","Dm","Cad","death","Ht&HyperLip","HyperLip&Dm","Ht&Dm","Ht&HyperLip&Dm")
transitions=matrix(0,nrow = length(nstates),ncol=length(nstates))
rownames(transitions)=nstates
colnames(transitions)=nstates
transitions["Health","Health"]=1
transitions["Health","Ht"]=1
transitions["Health","HyperLip"]=1
transitions["Health","Dm"]=1
transitions["Health","Cad"]=1
transitions["Health","death"]=1
transitions["Ht","Ht"]=1
transitions["Ht","Ht&HyperLip"]=1
transitions["Ht","Ht&Dm"]=1
transitions["Ht","Cad"]=1
transitions["Ht","death"]=1
transitions["HyperLip","HyperLip"]=1
transitions["HyperLip","Ht&HyperLip"]=1
transitions["HyperLip","HyperLip&Dm"]=1
transitions["HyperLip","Cad"]=1
transitions["HyperLip","death"]=1
transitions["Dm","Dm"]=1
transitions["Dm","Ht&Dm"]=1
transitions["Dm","HyperLip&Dm"]=1
transitions["Dm","Cad"]=1
transitions["Dm","death"]=1
transitions["Ht&HyperLip","Ht&HyperLip"]=1
transitions["Ht&HyperLip","Ht&HyperLip&Dm"]=1
transitions["Ht&HyperLip","Cad"]=1
transitions["Ht&HyperLip","death"]=1
transitions["Ht&Dm","Ht&Dm"]=1
transitions["Ht&Dm","Ht&HyperLip&Dm"]=1
transitions["Ht&Dm","Cad"]=1
transitions["Ht&Dm","death"]=1
transitions["HyperLip&Dm","HyperLip&Dm"]=1
transitions["HyperLip&Dm","Ht&HyperLip&Dm"]=1
transitions["HyperLip&Dm","Cad"]=1
transitions["HyperLip&Dm","death"]=1
transitions["Ht&HyperLip&Dm","Ht&HyperLip&Dm"]=1
transitions["Ht&HyperLip&Dm","Cad"]=1
transitions["Ht&HyperLip&Dm","death"]=1
## absorbing states
transitions["death","death"]=1
transitions["Cad","Cad"]=1
print(transitions)
ages=c(40:81)
s=statusarray(df_frame = data.table(train),ages = ages,nstates = nstates)
library(data.table)
ages=c(40:81)
s=statusarray(df_frame = data.table(train),ages = ages,nstates = nstates)
data_dir="/Users/sarahurbut/Library/CloudStorage/Dropbox-Personal"
load(paste0(data_dir,'/pheno_dir/output/merged_pheno_censor_final_withdrugs_smoke.rds'))
library(MSGene)
library(data.table)
train=dfh[1:(nrow(dfh)*0.80),]
nstates=c("Health","Ht","HyperLip","Dm","Cad","death","Ht&HyperLip","HyperLip&Dm","Ht&Dm","Ht&HyperLip&Dm")
transitions=matrix(0,nrow = length(nstates),ncol=length(nstates))
rownames(transitions)=nstates
colnames(transitions)=nstates
transitions["Health","Health"]=1
transitions["Health","Ht"]=1
transitions["Health","HyperLip"]=1
transitions["Health","Dm"]=1
transitions["Health","Cad"]=1
transitions["Health","death"]=1
transitions["Ht","Ht"]=1
transitions["Ht","Ht&HyperLip"]=1
transitions["Ht","Ht&Dm"]=1
transitions["Ht","Cad"]=1
transitions["Ht","death"]=1
transitions["HyperLip","HyperLip"]=1
transitions["HyperLip","Ht&HyperLip"]=1
transitions["HyperLip","HyperLip&Dm"]=1
transitions["HyperLip","Cad"]=1
transitions["HyperLip","death"]=1
transitions["Dm","Dm"]=1
transitions["Dm","Ht&Dm"]=1
transitions["Dm","HyperLip&Dm"]=1
transitions["Dm","Cad"]=1
transitions["Dm","death"]=1
transitions["Ht&HyperLip","Ht&HyperLip"]=1
transitions["Ht&HyperLip","Ht&HyperLip&Dm"]=1
transitions["Ht&HyperLip","Cad"]=1
transitions["Ht&HyperLip","death"]=1
transitions["Ht&Dm","Ht&Dm"]=1
transitions["Ht&Dm","Ht&HyperLip&Dm"]=1
transitions["Ht&Dm","Cad"]=1
transitions["Ht&Dm","death"]=1
transitions["HyperLip&Dm","HyperLip&Dm"]=1
transitions["HyperLip&Dm","Ht&HyperLip&Dm"]=1
transitions["HyperLip&Dm","Cad"]=1
transitions["HyperLip&Dm","death"]=1
transitions["Ht&HyperLip&Dm","Ht&HyperLip&Dm"]=1
transitions["Ht&HyperLip&Dm","Cad"]=1
transitions["Ht&HyperLip&Dm","death"]=1
## absorbing states
transitions["death","death"]=1
transitions["Cad","Cad"]=1
print(transitions)
modelfitfun
ages=40:80
covariates="cad.prs+f.31.0.0+smoke+antihtn_now+statin_now"
train$cad.prs=scale(train$cad.prs)
mfit=modelfitfun(ages = ages,transit_mat=transitions,covariates,df = train,statusarray = s)
ages=c(40:81)
s=statusarray(df_frame = data.table(train),ages = ages,nstates = nstates)
ages=40:80
covariates="cad.prs+f.31.0.0+smoke+antihtn_now+statin_now"
train$cad.prs=scale(train$cad.prs)
mfit=modelfitfun(ages = ages,transit_mat=transitions,covariates,df = train,statusarray = s)
ages=40:80
coeff_array=coef_array_func(ages = ages,transit_mat = transitions,modelfit = mfit)
dim(coeff_array)
age=50
covariates=c(1,1,1,0,0,0)
absorbing_states=c(5,6)
age_specific_matrix <- generate_single_transition_matrix(age = 50, coeff_array, covariates, absorbing_states = c(5, 6))
print(age_specific_matrix)
rowSums(age_specific_matrix)
age_specific_matrix[absorbing_states[1],absorbing_states[1]]
age_specific_matrix[absorbing_states[2],absorbing_states[2]]
age_start <- 40
age_end <- 80
indcovariates=c(1,1,1,0,0,0)
# Execute the function.
result_matrix <- calculate_matrix_product_over_interval(coeff_array, indcovariates, age_start, age_end,absorbing_states = c(5,6))
result_matrix
print(result_matrix)
## we can also compute the lifetime risk as a product of one step and compare differences
cmat=coeff_array[,"Health","Cad",]
intercept=1
sex=c(0,1)
cad.prs=1
smoke=0
antihtn_now=0
statin_now=0
atrisk=expand.grid(intercept,cad.prs,sex,smoke,antihtn_now,statin_now)
mso = compute_prediction_product_matrix(
coefmat = cmat,
atrisk = atrisk,
agepredinterval = c(40:80)
)
mso$PredictedIntervalrisk[2]
covariates="cad.prs+f.31.0.0+smoke+antihtn_now+statin_now"
modelfit = fitfunc2(
df_frame=data.table::data.table(train),
ages = ages,
nstates = nstates,
mode = "binomial",
covariates = covariates)
modelfit$AR["50","Cad","Health"]
mfit$AR["50","Health","Cad"]
mfit$AR["60","Health","Cad"]
modelfit$AR["60","Cad","Health"]
modelfit$events["60","Cad","Health"]
mfit$events["60","Health","Cad"]
a = coefplotsmooth2(
ages = ages,
start = nstates[1],
stop = "Cad",
modelfit = modelfit,
window_width = 20,
span = 0.75,
degree = 2
)
healthy_coefs = a$custom_smooth
mso = compute_prediction_product_matrix(
coefmat = healthy_coefs,
atrisk = atrisk,
agepredinterval = c(40:80)
)
mso$PredictedIntervalrisk[2]
saveRDS(mfit,file = "~/multistate2/output/mfit.rds")
library(MSGene)
modelfitfun
modelfitfun
modelfitfun
